package ${packageName};

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.asiainfo.billing.drquery.cache.CacheProvider;
import com.asiainfo.billing.drquery.connection.DRConnection;
import com.asiainfo.billing.drquery.process.core.request.DRProcessRequest;
import com.asiainfo.billing.drquery.process.operation.summary.summaryRule.StatMetaDescriptor;
import com.asiainfo.billing.drquery.process.operation.summary.summaryRule.SummaryRule;
import com.asiainfo.billing.drquery.utils.NumberUtils;
import com.asiainfo.billing.drquery.Constants;
import com.asiainfo.billing.drquery.exception.AppRuntimeException;

/**
 * 汇总规则
 */
public class ${className} implements SummaryRule{
    private static final Log log = LogFactory.getLog(CommonSummaryRule.class);
	
	
	/**
	 * 实时汇总
	 */
	@Override
	public StatMetaDescriptor<String, Object> rule(Map<String, String> rowData, DRProcessRequest request, StatMetaDescriptor stat) {
		long t1 = System.currentTimeMillis();
		//StatMetaDescriptor<String,Object> stats = new StatMetaDescriptor<String,Object>();
		boolean isHistory = false;
		if("HIS".equals(request.getImpType())){
			isHistory = true;
		}
		//1: 历史与实时相同的查询规则, 0: 历史查询规则
		if("GPRS".equals(request.getBigType())){
			GPRS_CUR_1(rowData, request, "GPRS", "GPRS_CUR_1", 1, stat, isHistory, 1);
			GPRS_CUR_2(rowData, request, "GPRS", "GPRS_CUR_2", 2, stat, isHistory, 1);
			GPRS_CUR_3(rowData, request, "GPRS", "GPRS_CUR_3", 3, stat, isHistory, 1);
			GPRS_CUR_4(rowData, request, "GPRS", "GPRS_CUR_4", 4, stat, isHistory, 1);
			GPRS_CUR_5(rowData, request, "GPRS", "GPRS_CUR_5", 5, stat, isHistory, 1);
			GPRS_CUR_6(rowData, request, "GPRS", "GPRS_CUR_6", 6, stat, isHistory, 1);
			GPRS_CUR_21(rowData, request, "GPRS", "GPRS_CUR_21", 21, stat, isHistory, 1);
			GPRS_CUR_22(rowData, request, "GPRS", "GPRS_CUR_22", 22, stat, isHistory, 1);
			GPRS_CUR_23(rowData, request, "GPRS", "GPRS_CUR_23", 23, stat, isHistory, 1);
			GPRS_CUR_24(rowData, request, "GPRS", "GPRS_CUR_24", 24, stat, isHistory, 1);
			GPRS_CUR_25(rowData, request, "GPRS", "GPRS_CUR_25", 25, stat, isHistory, 1);
			GPRS_CUR_26(rowData, request, "GPRS", "GPRS_CUR_26", 26, stat, isHistory, 1);
			GPRS_CUR_27(rowData, request, "GPRS", "GPRS_CUR_27", 27, stat, isHistory, 1);
			GPRS_CUR_41(rowData, request, "GPRS", "GPRS_CUR_41", 41, stat, isHistory, 1);
			GPRS_CUR_42(rowData, request, "GPRS", "GPRS_CUR_42", 42, stat, isHistory, 1);
			GPRS_CUR_43(rowData, request, "GPRS", "GPRS_CUR_43", 43, stat, isHistory, 1);
			GPRS_CUR_44(rowData, request, "GPRS", "GPRS_CUR_44", 44, stat, isHistory, 1);
			GPRS_CUR_45(rowData, request, "GPRS", "GPRS_CUR_45", 45, stat, isHistory, 1);
			GPRS_CUR_46(rowData, request, "GPRS", "GPRS_CUR_46", 46, stat, isHistory, 1);
			GPRS_CUR_61(rowData, request, "GPRS", "GPRS_CUR_61", 61, stat, isHistory, 1);
			GPRS_CUR_62(rowData, request, "GPRS", "GPRS_CUR_62", 62, stat, isHistory, 1);
			GPRS_CUR_63(rowData, request, "GPRS", "GPRS_CUR_63", 63, stat, isHistory, 1);
			GPRS_CUR_64(rowData, request, "GPRS", "GPRS_CUR_64", 64, stat, isHistory, 1);
			GPRS_CUR_65(rowData, request, "GPRS", "GPRS_CUR_65", 65, stat, isHistory, 1);
		}else if("GSM".equals(request.getBigType())){
			GSM_CUR_1(rowData, request, "GSM", "GSM_CUR_1", 1, stat, isHistory, 1);
			GSM_CUR_2(rowData, request, "GSM", "GSM_CUR_2", 2, stat, isHistory, 1);
			GSM_CUR_3(rowData, request, "GSM", "GSM_CUR_3", 3, stat, isHistory, 1);
			GSM_CUR_4(rowData, request, "GSM", "GSM_CUR_4", 4, stat, isHistory, 1);
			GSM_CUR_5(rowData, request, "GSM", "GSM_CUR_5", 5, stat, isHistory, 1);
			GSM_CUR_6(rowData, request, "GSM", "GSM_CUR_6", 6, stat, isHistory, 1);
			GSM_CUR_7(rowData, request, "GSM", "GSM_CUR_7", 7, stat, isHistory, 1);
			GSM_CUR_8(rowData, request, "GSM", "GSM_CUR_8", 8, stat, isHistory, 1);
			GSM_CUR_9(rowData, request, "GSM", "GSM_CUR_9", 9, stat, isHistory, 1);
			GSM_CUR_10(rowData, request, "GSM", "GSM_CUR_10", 10, stat, isHistory, 1);
			GSM_CUR_90(rowData, request, "GSM", "GSM_CUR_90", 90, stat, isHistory, 1);
			GSM_CUR_91(rowData, request, "GSM", "GSM_CUR_91", 91, stat, isHistory, 1);
			GSM_CUR_92(rowData, request, "GSM", "GSM_CUR_92", 92, stat, isHistory, 1);		
		}else if ("OWNSP".equals(request.getBigType())){
			OWNSP_CUR_1(rowData, request, "OWNSP", "OWNSP_CUR_1", 1, stat, isHistory, 1);
			OWNSP_CUR_2(rowData, request, "OWNSP", "OWNSP_CUR_2", 2, stat, isHistory, 1);
			OWNSP_CUR_3(rowData, request, "OWNSP", "OWNSP_CUR_3", 3, stat, isHistory, 1);
			OWNSP_CUR_4(rowData, request, "OWNSP", "OWNSP_CUR_4", 4, stat, isHistory, 1);
		}else if("SP".equals(request.getBigType())){
			SP_CUR_1(rowData, request, "SP", "SP_CUR_1", 1, stat, isHistory, 1);
			SP_CUR_2(rowData, request, "SP", "SP_CUR_2", 2, stat, isHistory, 1);
		}
		else if("SMS".equals(request.getBigType())){
			SMS_CUR_1(rowData, request, "SMS", "SMS_CUR_1", 1, stat, isHistory, 1);
			SMS_CUR_2(rowData, request, "SMS", "SMS_CUR_2", 2, stat, isHistory, 1);
			SMS_CUR_3(rowData, request, "SMS", "SMS_CUR_3", 3, stat, isHistory, 1);
			SMS_CUR_4(rowData, request, "SMS", "SMS_CUR_4", 4, stat, isHistory, 1);
			SMS_CUR_5(rowData, request, "SMS", "SMS_CUR_5", 5, stat, isHistory, 1);
			SMS_CUR_6(rowData, request, "SMS", "SMS_CUR_6", 6, stat, isHistory, 1);
			SMS_CUR_7(rowData, request, "SMS", "SMS_CUR_7", 7, stat, isHistory, 1);
			SMS_CUR_8(rowData, request, "SMS", "SMS_CUR_8", 8, stat, isHistory, 1);
			SMS_CUR_9(rowData, request, "SMS", "SMS_CUR_9", 9, stat, isHistory, 1);
			SMS_CUR_10(rowData, request, "SMS", "SMS_CUR_10", 10, stat, isHistory, 1);
			SMS_CUR_11(rowData, request, "SMS", "SMS_CUR_11", 11, stat, isHistory, 1);
			SMS_CUR_12(rowData, request, "SMS", "SMS_CUR_12", 12, stat, isHistory, 1);
			SMS_CUR_13(rowData, request, "SMS", "SMS_CUR_13", 13, stat, isHistory, 1);
			SMS_CUR_14(rowData, request, "SMS", "SMS_CUR_14", 14, stat, isHistory, 1);
			SMS_CUR_15(rowData, request, "SMS", "SMS_CUR_15", 15, stat, isHistory, 1);
			SMS_CUR_16(rowData, request, "SMS", "SMS_CUR_16", 16, stat, isHistory, 1);
			SMS_CUR_17(rowData, request, "SMS", "SMS_CUR_17", 17, stat, isHistory, 1);
			SMS_CUR_90(rowData, request, "SMS", "SMS_CUR_90", 90, stat, isHistory, 1);
			SMS_CUR_91(rowData, request, "SMS", "SMS_CUR_91", 91, stat, isHistory, 1);
		}
		long t2 = System.currentTimeMillis();	
		if((t2 - t1) > 0){
			//System.out.println("current summary token: " + (t2 - t1) + "ms");
		}
		return stat;
	}
	
	
	
	/**
	 * 历史对账单汇总
	 * 1: 费用, 3: 免费资源
	 */
	public StatMetaDescriptor<String,Object> historyRule(Map<String, String> rowData, DRProcessRequest request, StatMetaDescriptor stat){
		//System.out.println(rowData);
		long t1 = System.currentTimeMillis();	
		if("GPRS".equals(request.getBigType())){
		    GPRS_HIS_2(rowData, request, "GPRS", "1", 2, stat);
			  GPRS_HIS_5(rowData, request, "GPRS", "3", 5, stat);
			  GPRS_HIS_6(rowData, request, "GPRS", "3", 6, stat);
			  GPRS_HIS_23(rowData, request, "GPRS", "1", 23, stat);
			  GPRS_HIS_25(rowData, request, "GPRS", "3", 25, stat);
			  GPRS_HIS_26(rowData, request, "GPRS", "3", 26, stat);
			  GPRS_HIS_27(rowData, request, "GPRS", "3", 27, stat);
			  GPRS_HIS_44(rowData, request, "GPRS", "3", 44, stat);
			  GPRS_HIS_45(rowData, request, "GPRS", "3", 45, stat);
			  GPRS_HIS_46(rowData, request, "GPRS", "3", 46, stat);
			  GPRS_HIS_64(rowData, request, "GPRS", "3", 64, stat);
			  GPRS_HIS_65(rowData, request, "GPRS", "3", 65, stat);
		}else if ("GSM".equals(request.getBigType())){
			GSM_HIS_1(rowData, request, "GSM", "1", 1, stat);
			GSM_HIS_2(rowData, request, "GSM", "1", 2, stat);
			GSM_HIS_3(rowData, request, "GSM", "1", 3, stat);
			GSM_HIS_4(rowData, request, "GSM", "1", 4, stat);
			GSM_HIS_5(rowData, request, "GSM", "1", 5, stat);
			GSM_HIS_6(rowData, request, "GSM", "1", 6, stat);
			GSM_HIS_7(rowData, request, "GSM", "1", 7, stat);
			GSM_HIS_8(rowData, request, "GSM", "1", 8, stat);
			GSM_HIS_9(rowData, request, "GSM", "1", 9, stat);
			GSM_HIS_90(rowData, request, "GSM", "3", 90, stat);
			GSM_HIS_91(rowData, request, "GSM", "3", 91, stat);
			GSM_HIS_92(rowData, request, "GSM", "3", 92, stat);		
		}else if ("OWNSP".equals(request.getBigType())){
			;
		}
		else if("SMS".equals(request.getBigType())){
			SMS_HIS_1(rowData, request, "SMS", "1", 1, stat);
			SMS_HIS_2(rowData, request, "SMS", "1", 2, stat);
			SMS_HIS_3(rowData, request, "SMS", "1", 3, stat);
			SMS_HIS_4(rowData, request, "SMS", "1", 4, stat);
			SMS_HIS_5(rowData, request, "SMS", "1", 5, stat);
			SMS_HIS_6(rowData, request, "SMS", "1", 6, stat);
			SMS_HIS_7(rowData, request, "SMS", "1", 7, stat);
			SMS_HIS_8(rowData, request, "SMS", "1", 8, stat);
			SMS_HIS_9(rowData, request, "SMS", "1", 9, stat);
			SMS_HIS_10(rowData, request, "SMS", "1", 10, stat);
			SMS_HIS_11(rowData, request, "SMS", "1", 11, stat);
			SMS_HIS_12(rowData, request, "SMS", "1", 12, stat);
			SMS_HIS_13(rowData, request, "SMS", "1", 13, stat);
			SMS_HIS_90(rowData, request, "SMS", "3", 90, stat);
			SMS_HIS_91(rowData, request, "SMS", "3", 91, stat);
		}
		long t2 = System.currentTimeMillis();	
		if((t2 - t1) > 0){
			//System.out.println("history summary token: " + (t2 - t1) + "ms");
		}
		return stat;
	}


    ${template.GPRS}
    ${template.SP}
    ${template.GSM}
	${template.OWNSP}
	${template.SMS}
    
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List getResultFromHisConfig(StatMetaDescriptor stat, DRProcessRequest request){
	
		 String CHARGE_TEMPLATE = " select nvl(fee, 0),item2_name, item3_name, item2_id code from acc_emend_dtl_"+ request.getRegionCode() +"_"+ request.getBillMonth() +" a "
		 		                + " where user_id = '"+ request.getUserId() +"' and item2_id in ${code} "
		 		                + " and a.item1_id in (101,410,420,430,450,480,490)";
		 
		 String FREE_RESOURCE_TEMPLATE = " select nvl(fee, 0), item2_name, item3_name, item2_id code from acc_emend_other_"+ request.getRegionCode() +"_"+ request.getBillMonth() +" a "
		 		                       + " where user_id = '"+ request.getUserId() +"' and item2_id in ${code} "
		 		                       + " and a.item1_id='501'";
		 Statement stmt = null;
		 ResultSet rs1 = null;
		 ResultSet rs2 = null;
		 List items = new ArrayList();
		 DRConnection drConnection = new DRConnection();
		 try{
			 Connection conn = drConnection.getConnectionFromFactory("CSQRYConnectionFactory");
			 stmt = conn.createStatement();
			 
			 String ids_charge = "";
			 String ids_free_resource = "";
			 for(Iterator it = stat.getHisCodeProperties().keySet().iterator(); it.hasNext();){
				 String code = (String) it.next();
				 Map properties = (Map) stat.getHisCodeProperties().get(code);
				 properties.put("type", 0);
				 properties.put("value", 0d);
				 String resourceType = (String)properties.get("resourceType");
				 if("1".equals(resourceType)){
					 ids_charge += code + ",";
				 }else if("3".equals(resourceType)){
					 ids_free_resource += code + ",";
				 }
			 }
			 //System.out.println("ids_charge = " + ids_charge);
			 //System.out.println("ids_free_resource = " + ids_free_resource);
			 if(ids_charge.length() > 0){
				 ids_charge = ids_charge.substring(0, ids_charge.length() - 1);
				 String ids = "('" + ids_charge.replace(",", "','") + "')";
				 String sql1 = CHARGE_TEMPLATE.replace("${code}", ids);
				 log.info("sql1---> " + sql1);
				 rs1 = stmt.executeQuery(sql1);
				 while(rs1.next()){
					String code = rs1.getString(4);
					Map properties = (Map) stat.getHisCodeProperties().get(code);
					Double val = rs1.getBigDecimal(1).doubleValue();
					properties.put("value", val / 100);
					properties.put("desc", rs1.getString(2) 
					     + unitTrans((rs1.getString(3)== null || rs1.getString(3).equals("") ? "分" : rs1.getString(3))));
				 }
			 }
			 if(ids_free_resource.length() > 0){
				 ids_free_resource = ids_free_resource.substring(0, ids_free_resource.length() - 1);
				 String ids = "('" + ids_free_resource.replace(",", "','") + "')";
				 String sql2 = FREE_RESOURCE_TEMPLATE.replace("${code}", ids);
				 log.info("sql2---> " + sql2);
				 rs2 = stmt.executeQuery(sql2);
				 while(rs2.next()){
					String code = rs2.getString(4);
					Map properties = (Map) stat.getHisCodeProperties().get(code);
					Double val = rs2.getBigDecimal(1).doubleValue();
					properties.put("value", val);
					properties.put("desc", rs2.getString(2) +unitTrans(rs2.getString(3)));
				 }
			 }
			 for(Iterator it = stat.getHisCodeProperties().keySet().iterator(); it.hasNext();){
			 	 String code = (String) it.next();
				 Map properties = (Map) stat.getHisCodeProperties().get(code);
				 if(properties.containsKey("desc")){
				 	items.add(properties);
				 }
			 }
			 			
		 }catch(Exception e){
			 //log.error("历史汇总取对账单报错", e);
			 throw new AppRuntimeException("历史汇总取对账单报错", e);
		 }finally{
			 if(rs1 != null){
				try{
					rs1.close();
				}catch(Exception e){
					log.error(e);
				}
			 }
			 if(rs2 != null){
				try{
					rs2.close();
				}catch(Exception e){
					log.error(e);
				}
			 }
			 if(stmt != null){
				try{
					stmt.close();
				}catch(Exception e){
					log.error(e);
				}
			 }
			 drConnection.releaseConnection();
		 }
		 
		 return items;
	}

	public String unitTrans(String unit){
		if("KB".equals(unit)){
			return "(单位:**MB**KB)";
		}
		else if("分".equals(unit)){
			return "(单位:元)";
		}
		else if("rmb".equals(unit)){
			return "(单位:元)";	
		}
		else if("秒".equals(unit)){
			return "(单位:**小时**分**秒)";
		}
		else if("分钟".equals(unit)){
			return "(单位:**小时**分**秒)";
		}
		else if(unit == null || "".equals(unit)){ 
			return ""; 
		}
		else {
			return "(单位:"+unit+")";
		}
	}

	public String getFreeResName(String SRC_FREERES_CODE){
		String desc = "";
		if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";
			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";
			}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";
			}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";
			}else{
				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";
			}
		}
		return desc;
	}

	public double getFreeResValue(String resCode, String resValue){
		double val = 0;
		if(CacheProvider.tabFreeCode(resCode)){
			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",resCode))
					||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))
					||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))){
				val = NumberUtils.parseDouble(resValue);
			}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))){
				val = NumberUtils.parseDouble(resValue)/100;
			}else{
				val = NumberUtils.parseDouble(resValue);
			}
		}
		return val;
	}

	public void sumCURResources(Map<String, String> rowData, 
							 DRProcessRequest request, 
							 String bigType, 
							 String sumType, 
							 int sortIndex, 
							 StatMetaDescriptor stat){
		String[] codes = null;
		if(rowData.get(Constants.FREERES_CODE_LIST) != null && !rowData.get(Constants.FREERES_CODE_LIST).equals("")){
			codes = rowData.get(Constants.FREERES_CODE_LIST).split("\\|");
		}
		if(codes != null){
			for(String code : codes){
				StatMetaDescriptor meta = new StatMetaDescriptor(code, getFreeResName(code), 
						getFreeResValue(code, rowData.get(Constants.SRC_FREERES_CODE + "_" + code)), sumType, bigType, sortIndex);
				stat.addCurItem(meta);
			}
		}
		
	}

	public void sumHisResources(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String[] codes = null;
		if(rowData.get(Constants.FREERES_CODE_LIST) != null && !rowData.get(Constants.FREERES_CODE_LIST).equals("")){
			codes = rowData.get(Constants.FREERES_CODE_LIST).split("\\|");
		}
		if(codes != null){
			for(String code : codes){
				stat.addHisItem(code, resourceType, bigType, sortIndex);
			}
		}
	}
}