	public void GPRS_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507010";
		String desc = "GPRS总流量(单位:**MB**KB)";;
		double val = 0;
		if(!isHistory || (isHistory && hisQueryType == 1)){
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))) {
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"20".equals(CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR)))){
						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));
						}else{
							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
						}
				}
			}else{
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"5".equals(rowData.get(Constants.SRC_PLAN_ID))){
						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));
						}else{
							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
						}
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
		
	}

	public void GPRS_HIS_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String desc = "GPRS总流量(单位:**MB**KB)";
		String code = "4507010";		
		stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	
	public void GPRS_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "";
		String desc = "GPRS总费用(单位:元)";
		double val = 0;
		String SRC_START_TIME = rowData.get(Constants.SRC_START_TIME);
		if(SRC_START_TIME.compareTo("201204") >= 0){
			code = "49000020";
		}else{
			code = "42000040";
		}
		
		if(!isHistory || (isHistory && hisQueryType == 1)){
						String SRC_EXTEND_ATTR_SHORTCODE1 = rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);
			String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);
			String prodName = CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_SERVICE_TYPE = rowData.get(Constants.SRC_SERVICE_TYPE);
			int serviceType = NumberUtils.parseInt(SRC_SERVICE_TYPE);
			if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){
					if("11".equals(SRC_CALL_TYPE) && !"20".equals(prodName) && serviceType != 3){
						val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+ NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
					}
			}else{
					if("11".equals(SRC_CALL_TYPE) && !"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && serviceType != 3){
						val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+ NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
					}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}


	public void GPRS_HIS_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String code = "";
		if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){
			code = "49000020";
		}else{
			code = "42000040";
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);
	}


	public void GPRS_CUR_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507030";
		String desc = "省内GPRS流量(单位:**MB**KB)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
						String SRC_EXTEND_ATTR_SHORTCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);
			String SRC_ROAM_TYPE=rowData.get(Constants.SRC_ROAM_TYPE);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			
			if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && ("1".equals(SRC_ROAM_TYPE) || "2".equals(SRC_ROAM_TYPE)
						||"5".equals(SRC_ROAM_TYPE)||"6".equals(SRC_ROAM_TYPE))&& !"20".equals(PLAN_TYPE)){

					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}else{
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("1".equals(SRC_ROAM_TYPE)||"2".equals(SRC_ROAM_TYPE))
						||"5".equals(SRC_ROAM_TYPE)||"6".equals(SRC_ROAM_TYPE)){
					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507040";
		String desc = "省外GPRS流量(单位:**MB**KB)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_ROAM_TYPE=rowData.get(Constants.SRC_ROAM_TYPE);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("3".equals(SRC_ROAM_TYPE)||"4".equals(SRC_ROAM_TYPE)
						||"7".equals(SRC_ROAM_TYPE)&&!"20".equals(PLAN_TYPE))){

					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}else{
				if ("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("3".equals(SRC_ROAM_TYPE)||"4".equals(SRC_ROAM_TYPE)
						||"7".equals(SRC_ROAM_TYPE))&&!"5".equals(PLAN_TYPE)){
					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}			
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		double val = 0;
		String desc = "";
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 
				!"20".equals(PLAN_TYPE))){
			code = rowData.get(Constants.SRC_FREERES_CODE);
		}
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_FREERES_CODE = rowData.get(Constants.SRC_FREERES_CODE);
			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";
				}else{
					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";
				}
			}
			
			if("".equals(SRC_FREERES_CODE)){
				if("4".equals(CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE))){
					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))/100;
				}else{
					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));
				}
			}else{
				val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));
			}
			
			StatMetaDescriptor sm = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(sm);
		}*/
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 
				!"20".equals(PLAN_TYPE))){
			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);
		}
	}
	
	
	public void GPRS_HIS_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		
		String desc = null;
		String code = null;
		
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 
				!"20".equals(PLAN_TYPE))){
			//code = rowData.get(Constants.SRC_FREERES_CODE);
			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);
		}
		//stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	

	public void GPRS_CUR_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		double val = 0;
		String desc = "";
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String SRC_EXTEND_ATTR_LONGCODE2 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);
			String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);

			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}
			StatMetaDescriptor sm = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(sm);
		}*/
	}
	
	public void GPRS_HIS_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		
		/*String code = null;
		
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 
				!"20".equals(PLAN_TYPE))){
			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);*/
	}
	
	
	public void GPRS_CUR_21(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507070";
		String desc = "WLAN总时长(单位:**小时**分**秒)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_SHORTCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);
			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_DURATION=rowData.get(Constants.SRC_DURATION);
			
			if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null ||!"1".equals(SRC_OPP_AREA_CODE)) && 
						!"20".equals(PLAN_TYPE)){
					val=NumberUtils.parseDouble(SRC_DURATION);
				}
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){
					val=NumberUtils.parseDouble(SRC_DURATION);
				}
			}	
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	

	public void GPRS_CUR_22(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507080";
		String desc = "WLAN总费用(单位:元)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if(SRC_START_TIME.compareTo("20120401000000") < 0){
				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){
					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}


	public void GPRS_CUR_23(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "49000010";
		String desc = "WLAN总费用(单位:元)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) && 
						!"20".equals(PLAN_TYPE)){
						val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+
								NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
					}
			}else if(rowData.get(Constants.SRC_START_TIME).compareTo("20120401000000")>0){
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){
					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+
							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	

	public void GPRS_HIS_23(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		
		String code = "49000010";
		stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	
	
	public void GPRS_CUR_24(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507110";
		String desc = "WLAN总流量(单位:**MB**KB)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"20".equals(PLAN_TYPE)){
					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_25(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);
			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
					&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_FREERES_CODE);
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
					&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);
		}
		
	}
	
	
	public void GPRS_HIS_25(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		
		String code = "";
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
				&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			//code=rowData.get(Constants.SRC_FREERES_CODE);
			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);
		}
		//stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	

	public void GPRS_CUR_26(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 
					!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			}
			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))
						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
	}
	

	public void GPRS_HIS_26(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		/*String code = "";
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 
				!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);*/
	}
	
	
	public void GPRS_CUR_27(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 
					!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			}
			
			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2))>0){
				String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);
				if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))
							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
					}else{
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
					}
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
	}
	
	
	public void GPRS_HIS_27(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		/* code = "";
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 
				!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);*/
	}
	

	public void GPRS_CUR_41(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "-2";
		String desc = "校园WLAN总时长(单位:**小时**分**秒)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_EXT_INFO=rowData.get(Constants.SRC_OPP_EXT_INFO);
			
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"!".equals(SRC_OPP_AREA_CODE)) && 
						"1000".equals(SRC_OPP_EXT_INFO) && !"20".equals(PLAN_TYPE)){
					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}else{
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
						&& "1000".equals(SRC_OPP_EXT_INFO)){
					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_42(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "45401871";
		String desc = "校园WLAN总费用(单位:元)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			String SRC_OPP_EXT_INFO=rowData.get(Constants.SRC_OPP_EXT_INFO);
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) &&
						"1000".equals(SRC_OPP_EXT_INFO) && !"20".equals(PLAN_TYPE)){
					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+
							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
				}
			}else{
				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) &&
						"1000".equals(SRC_OPP_EXT_INFO)){
					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+
							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_43(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507120";
		String desc = "校园WLAN总流量(单位:**MB**KB)";
		int val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && 
						!"20".equals(PLAN_TYPE)){
					val=NumberUtils.parseInt(rowData.get(Constants.SRC_OPP_TYPE));
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_44(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);
			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
					&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_FREERES_CODE);
			}
			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))>0){

				String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);
				if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))
							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))
							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){
						val=NumberUtils.parseDouble(SRC_FREERES_VAL);
					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){
						val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;
					}else{
						val=NumberUtils.parseDouble(SRC_FREERES_VAL);
					}
				}else{
					val=NumberUtils.parseDouble(SRC_FREERES_VAL);
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
					&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);
		}
	}
	
	
	public void GPRS_HIS_44(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String code = null;
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))
				&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			//code=rowData.get(Constants.SRC_FREERES_CODE);
			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);
		}
		//stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	
	
	public void GPRS_CUR_45(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 
					"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			}
			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))
						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}else{
				val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
	}
	
	
	public void GPRS_HIS_45(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		/*String code = null;
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 
				"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);*/
	}
	
	
	public void GPRS_CUR_46(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);
			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 
					"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			}
			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))
						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}else{
				val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
	}
	

	public void GPRS_HIS_46(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String code = null;
		String PLAN_TYPE = CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		String SRC_OPP_AREA_CODE = rowData.get(Constants.SRC_OPP_AREA_CODE);
		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 
				"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){
			code = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	
	
	public void GPRS_CUR_61(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507090";
		String desc = "无线宽带总时长(单位:**小时**分**秒)";
		int val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("20".equals(PLAN_TYPE)){
					val=NumberUtils.parseInt(rowData.get(Constants.SRC_DURATION));
				}
			}else{
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "5".equals(rowData.get(Constants.SRC_PLAN_ID))){
					val=NumberUtils.parseInt(rowData.get(Constants.SRC_DURATION));
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_62(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "";
		String desc = "无线宽带总费用(单位:元)";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){
				code = "49000040";
			}else{
				code = "42001360";
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
				if("20".equals(PLAN_TYPE)){
					val=(double) 0;
				}
			}else{
				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "5".equals(rowData.get(Constants.SRC_PLAN_ID))){
					val=(double) 0;
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	

	public void GPRS_CUR_63(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		String code = "4507130";
		String desc = "无线宽带总流量(单位:**MB**KB)";
		int val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){
				String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
				if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){
					if("20".equals(PLAN_TYPE)){
						val=NumberUtils.parseInt(rowData.get(Constants.SRC_OPP_TYPE));
					}
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}
	}
	
	
	public void GPRS_CUR_64(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);
			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_FREERES_CODE);
			}
			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))>0){

				String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);
				if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){
					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))
							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))
							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){
						val=NumberUtils.parseDouble(SRC_FREERES_VAL);
					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){
						val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;
					}else{
						val=NumberUtils.parseDouble(SRC_FREERES_VAL);
					}
				}else{
					val=NumberUtils.parseDouble(SRC_FREERES_VAL);
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){
			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);
		}
	}
	

	public void GPRS_HIS_64(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		String code = null;
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){
			//code=rowData.get(Constants.SRC_FREERES_CODE);
			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);
		}
		//stat.addHisItem(code, resourceType, bigType, sortIndex);
	}
	

	public void GPRS_CUR_65(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 
			boolean isHistory, int hisQueryType){
		
		/*String code = "";
		String desc = "";
		double val = 0;

		
		if(!isHistory || (isHistory && hisQueryType == 1)){
			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";
				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";
				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";
				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";
				}else{
					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";
				}
			}
			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
			if("5".equals(PLAN_TYPE) || "20".equals(PLAN_TYPE)){
				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
			}
			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2))>0){
				String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
				if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){
					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))
							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))
							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;
					}else{
						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
					}
				}else{
					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);
				}
			}
			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);
			stat.addCurItem(meta);
		}*/

	}
	

	public void GPRS_HIS_65(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){
		/*String code = null;
		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));
		if("5".equals(PLAN_TYPE) || "20".equals(PLAN_TYPE)){
			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);
		}
		stat.addHisItem(code, resourceType, bigType, sortIndex);*/
	}
