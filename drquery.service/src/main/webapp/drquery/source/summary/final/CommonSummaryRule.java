package com.asiainfo.billing.drquery.process.operation.summary.summaryRule.impl;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Statement;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.asiainfo.billing.drquery.cache.CacheProvider;import com.asiainfo.billing.drquery.connection.DRConnection;import com.asiainfo.billing.drquery.process.core.request.DRProcessRequest;import com.asiainfo.billing.drquery.process.operation.summary.summaryRule.StatMetaDescriptor;import com.asiainfo.billing.drquery.process.operation.summary.summaryRule.SummaryRule;import com.asiainfo.billing.drquery.utils.NumberUtils;import com.asiainfo.billing.drquery.Constants;import com.asiainfo.billing.drquery.exception.AppRuntimeException;/** * 汇总规则 */public class CommonSummaryRule implements SummaryRule{    private static final Log log = LogFactory.getLog(CommonSummaryRule.class);			/**	 * 实时汇总	 */	@Override	public StatMetaDescriptor<String, Object> rule(Map<String, String> rowData, DRProcessRequest request, StatMetaDescriptor stat) {		long t1 = System.currentTimeMillis();		//StatMetaDescriptor<String,Object> stats = new StatMetaDescriptor<String,Object>();		boolean isHistory = false;		if("HIS".equals(request.getImpType())){			isHistory = true;		}		//1: 历史与实时相同的查询规则, 0: 历史查询规则		if("GPRS".equals(request.getBigType())){			GPRS_CUR_1(rowData, request, "GPRS", "GPRS_CUR_1", 1, stat, isHistory, 1);			GPRS_CUR_2(rowData, request, "GPRS", "GPRS_CUR_2", 2, stat, isHistory, 1);			GPRS_CUR_3(rowData, request, "GPRS", "GPRS_CUR_3", 3, stat, isHistory, 1);			GPRS_CUR_4(rowData, request, "GPRS", "GPRS_CUR_4", 4, stat, isHistory, 1);			GPRS_CUR_5(rowData, request, "GPRS", "GPRS_CUR_5", 5, stat, isHistory, 1);			GPRS_CUR_6(rowData, request, "GPRS", "GPRS_CUR_6", 6, stat, isHistory, 1);			GPRS_CUR_21(rowData, request, "GPRS", "GPRS_CUR_21", 21, stat, isHistory, 1);			GPRS_CUR_22(rowData, request, "GPRS", "GPRS_CUR_22", 22, stat, isHistory, 1);			GPRS_CUR_23(rowData, request, "GPRS", "GPRS_CUR_23", 23, stat, isHistory, 1);			GPRS_CUR_24(rowData, request, "GPRS", "GPRS_CUR_24", 24, stat, isHistory, 1);			GPRS_CUR_25(rowData, request, "GPRS", "GPRS_CUR_25", 25, stat, isHistory, 1);			GPRS_CUR_26(rowData, request, "GPRS", "GPRS_CUR_26", 26, stat, isHistory, 1);			GPRS_CUR_27(rowData, request, "GPRS", "GPRS_CUR_27", 27, stat, isHistory, 1);			GPRS_CUR_41(rowData, request, "GPRS", "GPRS_CUR_41", 41, stat, isHistory, 1);			GPRS_CUR_42(rowData, request, "GPRS", "GPRS_CUR_42", 42, stat, isHistory, 1);			GPRS_CUR_43(rowData, request, "GPRS", "GPRS_CUR_43", 43, stat, isHistory, 1);			GPRS_CUR_44(rowData, request, "GPRS", "GPRS_CUR_44", 44, stat, isHistory, 1);			GPRS_CUR_45(rowData, request, "GPRS", "GPRS_CUR_45", 45, stat, isHistory, 1);			GPRS_CUR_46(rowData, request, "GPRS", "GPRS_CUR_46", 46, stat, isHistory, 1);			GPRS_CUR_61(rowData, request, "GPRS", "GPRS_CUR_61", 61, stat, isHistory, 1);			GPRS_CUR_62(rowData, request, "GPRS", "GPRS_CUR_62", 62, stat, isHistory, 1);			GPRS_CUR_63(rowData, request, "GPRS", "GPRS_CUR_63", 63, stat, isHistory, 1);			GPRS_CUR_64(rowData, request, "GPRS", "GPRS_CUR_64", 64, stat, isHistory, 1);			GPRS_CUR_65(rowData, request, "GPRS", "GPRS_CUR_65", 65, stat, isHistory, 1);		}else if("GSM".equals(request.getBigType())){			GSM_CUR_1(rowData, request, "GSM", "GSM_CUR_1", 1, stat, isHistory, 1);			GSM_CUR_2(rowData, request, "GSM", "GSM_CUR_2", 2, stat, isHistory, 1);			GSM_CUR_3(rowData, request, "GSM", "GSM_CUR_3", 3, stat, isHistory, 1);			GSM_CUR_4(rowData, request, "GSM", "GSM_CUR_4", 4, stat, isHistory, 1);			GSM_CUR_5(rowData, request, "GSM", "GSM_CUR_5", 5, stat, isHistory, 1);			GSM_CUR_6(rowData, request, "GSM", "GSM_CUR_6", 6, stat, isHistory, 1);			GSM_CUR_7(rowData, request, "GSM", "GSM_CUR_7", 7, stat, isHistory, 1);			GSM_CUR_8(rowData, request, "GSM", "GSM_CUR_8", 8, stat, isHistory, 1);			GSM_CUR_9(rowData, request, "GSM", "GSM_CUR_9", 9, stat, isHistory, 1);			GSM_CUR_10(rowData, request, "GSM", "GSM_CUR_10", 10, stat, isHistory, 1);			GSM_CUR_90(rowData, request, "GSM", "GSM_CUR_90", 90, stat, isHistory, 1);			GSM_CUR_91(rowData, request, "GSM", "GSM_CUR_91", 91, stat, isHistory, 1);			GSM_CUR_92(rowData, request, "GSM", "GSM_CUR_92", 92, stat, isHistory, 1);				}else if ("OWNSP".equals(request.getBigType())){			OWNSP_CUR_1(rowData, request, "OWNSP", "OWNSP_CUR_1", 1, stat, isHistory, 1);			OWNSP_CUR_2(rowData, request, "OWNSP", "OWNSP_CUR_2", 2, stat, isHistory, 1);			OWNSP_CUR_3(rowData, request, "OWNSP", "OWNSP_CUR_3", 3, stat, isHistory, 1);			OWNSP_CUR_4(rowData, request, "OWNSP", "OWNSP_CUR_4", 4, stat, isHistory, 1);		}else if("SP".equals(request.getBigType())){			SP_CUR_1(rowData, request, "SP", "SP_CUR_1", 1, stat, isHistory, 1);			SP_CUR_2(rowData, request, "SP", "SP_CUR_2", 2, stat, isHistory, 1);		}		else if("SMS".equals(request.getBigType())){			SMS_CUR_1(rowData, request, "SMS", "SMS_CUR_1", 1, stat, isHistory, 1);			SMS_CUR_2(rowData, request, "SMS", "SMS_CUR_2", 2, stat, isHistory, 1);			SMS_CUR_3(rowData, request, "SMS", "SMS_CUR_3", 3, stat, isHistory, 1);			SMS_CUR_4(rowData, request, "SMS", "SMS_CUR_4", 4, stat, isHistory, 1);			SMS_CUR_5(rowData, request, "SMS", "SMS_CUR_5", 5, stat, isHistory, 1);			SMS_CUR_6(rowData, request, "SMS", "SMS_CUR_6", 6, stat, isHistory, 1);			SMS_CUR_7(rowData, request, "SMS", "SMS_CUR_7", 7, stat, isHistory, 1);			SMS_CUR_8(rowData, request, "SMS", "SMS_CUR_8", 8, stat, isHistory, 1);			SMS_CUR_9(rowData, request, "SMS", "SMS_CUR_9", 9, stat, isHistory, 1);			SMS_CUR_10(rowData, request, "SMS", "SMS_CUR_10", 10, stat, isHistory, 1);			SMS_CUR_11(rowData, request, "SMS", "SMS_CUR_11", 11, stat, isHistory, 1);			SMS_CUR_12(rowData, request, "SMS", "SMS_CUR_12", 12, stat, isHistory, 1);			SMS_CUR_13(rowData, request, "SMS", "SMS_CUR_13", 13, stat, isHistory, 1);			SMS_CUR_14(rowData, request, "SMS", "SMS_CUR_14", 14, stat, isHistory, 1);			SMS_CUR_15(rowData, request, "SMS", "SMS_CUR_15", 15, stat, isHistory, 1);			SMS_CUR_16(rowData, request, "SMS", "SMS_CUR_16", 16, stat, isHistory, 1);			SMS_CUR_17(rowData, request, "SMS", "SMS_CUR_17", 17, stat, isHistory, 1);			SMS_CUR_90(rowData, request, "SMS", "SMS_CUR_90", 90, stat, isHistory, 1);			SMS_CUR_91(rowData, request, "SMS", "SMS_CUR_91", 91, stat, isHistory, 1);		}		long t2 = System.currentTimeMillis();			if((t2 - t1) > 0){			//System.out.println("current summary token: " + (t2 - t1) + "ms");		}		return stat;	}				/**	 * 历史对账单汇总	 * 1: 费用, 3: 免费资源	 */	public StatMetaDescriptor<String,Object> historyRule(Map<String, String> rowData, DRProcessRequest request, StatMetaDescriptor stat){		//System.out.println(rowData);		long t1 = System.currentTimeMillis();			if("GPRS".equals(request.getBigType())){		    GPRS_HIS_2(rowData, request, "GPRS", "1", 2, stat);			  GPRS_HIS_5(rowData, request, "GPRS", "3", 5, stat);			  GPRS_HIS_6(rowData, request, "GPRS", "3", 6, stat);			  GPRS_HIS_23(rowData, request, "GPRS", "1", 23, stat);			  GPRS_HIS_25(rowData, request, "GPRS", "3", 25, stat);			  GPRS_HIS_26(rowData, request, "GPRS", "3", 26, stat);			  GPRS_HIS_27(rowData, request, "GPRS", "3", 27, stat);			  GPRS_HIS_44(rowData, request, "GPRS", "3", 44, stat);			  GPRS_HIS_45(rowData, request, "GPRS", "3", 45, stat);			  GPRS_HIS_46(rowData, request, "GPRS", "3", 46, stat);			  GPRS_HIS_64(rowData, request, "GPRS", "3", 64, stat);			  GPRS_HIS_65(rowData, request, "GPRS", "3", 65, stat);		}else if ("GSM".equals(request.getBigType())){			GSM_HIS_1(rowData, request, "GSM", "1", 1, stat);			GSM_HIS_2(rowData, request, "GSM", "1", 2, stat);			GSM_HIS_3(rowData, request, "GSM", "1", 3, stat);			GSM_HIS_4(rowData, request, "GSM", "1", 4, stat);			GSM_HIS_5(rowData, request, "GSM", "1", 5, stat);			GSM_HIS_6(rowData, request, "GSM", "1", 6, stat);			GSM_HIS_7(rowData, request, "GSM", "1", 7, stat);			GSM_HIS_8(rowData, request, "GSM", "1", 8, stat);			GSM_HIS_9(rowData, request, "GSM", "1", 9, stat);			GSM_HIS_90(rowData, request, "GSM", "3", 90, stat);			GSM_HIS_91(rowData, request, "GSM", "3", 91, stat);			GSM_HIS_92(rowData, request, "GSM", "3", 92, stat);				}else if ("OWNSP".equals(request.getBigType())){			;		}		else if("SMS".equals(request.getBigType())){			SMS_HIS_1(rowData, request, "SMS", "1", 1, stat);			SMS_HIS_2(rowData, request, "SMS", "1", 2, stat);			SMS_HIS_3(rowData, request, "SMS", "1", 3, stat);			SMS_HIS_4(rowData, request, "SMS", "1", 4, stat);			SMS_HIS_5(rowData, request, "SMS", "1", 5, stat);			SMS_HIS_6(rowData, request, "SMS", "1", 6, stat);			SMS_HIS_7(rowData, request, "SMS", "1", 7, stat);			SMS_HIS_8(rowData, request, "SMS", "1", 8, stat);			SMS_HIS_9(rowData, request, "SMS", "1", 9, stat);			SMS_HIS_10(rowData, request, "SMS", "1", 10, stat);			SMS_HIS_11(rowData, request, "SMS", "1", 11, stat);			SMS_HIS_12(rowData, request, "SMS", "1", 12, stat);			SMS_HIS_13(rowData, request, "SMS", "1", 13, stat);			SMS_HIS_90(rowData, request, "SMS", "3", 90, stat);			SMS_HIS_91(rowData, request, "SMS", "3", 91, stat);		}		long t2 = System.currentTimeMillis();			if((t2 - t1) > 0){			//System.out.println("history summary token: " + (t2 - t1) + "ms");		}		return stat;	}    /*************************************${template.GPRS}*************************************************/	public void GPRS_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507010";		String desc = "GPRS总流量(单位:**MB**KB)";;		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))) {				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"20".equals(CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR)))){						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));						}else{							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));						}				}			}else{				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"5".equals(rowData.get(Constants.SRC_PLAN_ID))){						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));						}else{							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));						}				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}			}	public void GPRS_HIS_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String desc = "GPRS总流量(单位:**MB**KB)";		String code = "4507010";				stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GPRS_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "";		String desc = "GPRS总费用(单位:元)";		double val = 0;		String SRC_START_TIME = rowData.get(Constants.SRC_START_TIME);		if(SRC_START_TIME.compareTo("201204") >= 0){			code = "49000020";		}else{			code = "42000040";		}				if(!isHistory || (isHistory && hisQueryType == 1)){						String SRC_EXTEND_ATTR_SHORTCODE1 = rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);			String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);			String prodName = CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_SERVICE_TYPE = rowData.get(Constants.SRC_SERVICE_TYPE);			int serviceType = NumberUtils.parseInt(SRC_SERVICE_TYPE);			if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){					if("11".equals(SRC_CALL_TYPE) && !"20".equals(prodName) && serviceType != 3){						val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+ NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;					}			}else{					if("11".equals(SRC_CALL_TYPE) && !"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && serviceType != 3){						val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+ NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;					}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GPRS_HIS_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "";		if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){			code = "49000020";		}else{			code = "42000040";		}		stat.addHisItem(code, resourceType, bigType, sortIndex);	}	public void GPRS_CUR_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507030";		String desc = "省内GPRS流量(单位:**MB**KB)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){						String SRC_EXTEND_ATTR_SHORTCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);			String SRC_ROAM_TYPE=rowData.get(Constants.SRC_ROAM_TYPE);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));						if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && ("1".equals(SRC_ROAM_TYPE) || "2".equals(SRC_ROAM_TYPE)						||"5".equals(SRC_ROAM_TYPE)||"6".equals(SRC_ROAM_TYPE))&& !"20".equals(PLAN_TYPE)){					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}else{				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("1".equals(SRC_ROAM_TYPE)||"2".equals(SRC_ROAM_TYPE))						||"5".equals(SRC_ROAM_TYPE)||"6".equals(SRC_ROAM_TYPE)){					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507040";		String desc = "省外GPRS流量(单位:**MB**KB)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_ROAM_TYPE=rowData.get(Constants.SRC_ROAM_TYPE);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("3".equals(SRC_ROAM_TYPE)||"4".equals(SRC_ROAM_TYPE)						||"7".equals(SRC_ROAM_TYPE)&&!"20".equals(PLAN_TYPE))){					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}else{				if ("11".equals(rowData.get(Constants.SRC_CALL_TYPE))&&("3".equals(SRC_ROAM_TYPE)||"4".equals(SRC_ROAM_TYPE)						||"7".equals(SRC_ROAM_TYPE))&&!"5".equals(PLAN_TYPE)){					val="1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))?NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE)):NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		double val = 0;		String desc = "";		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 				!"20".equals(PLAN_TYPE))){			code = rowData.get(Constants.SRC_FREERES_CODE);		}		if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_CODE = rowData.get(Constants.SRC_FREERES_CODE);			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";				}else{					desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";				}			}						if("".equals(SRC_FREERES_CODE)){				if("4".equals(CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE))){					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))/100;				}else{					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));				}			}else{				val=NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));			}						StatMetaDescriptor sm = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(sm);		}*/		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 				!"20".equals(PLAN_TYPE))){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}	}			public void GPRS_HIS_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){				String desc = null;		String code = null;				String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 				!"20".equals(PLAN_TYPE))){			//code = rowData.get(Constants.SRC_FREERES_CODE);			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GPRS_CUR_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		double val = 0;		String desc = "";		if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String SRC_EXTEND_ATTR_LONGCODE2 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);			String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}			StatMetaDescriptor sm = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(sm);		}*/	}		public void GPRS_HIS_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){				/*String code = null;				String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (!"5".equals(rowData.get(Constants.SRC_PLAN_ID)) && 				!"20".equals(PLAN_TYPE))){			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);*/	}			public void GPRS_CUR_21(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507070";		String desc = "WLAN总时长(单位:**小时**分**秒)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_SHORTCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1);			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_DURATION=rowData.get(Constants.SRC_DURATION);						if("1".equals(SRC_EXTEND_ATTR_SHORTCODE1)){				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null ||!"1".equals(SRC_OPP_AREA_CODE)) && 						!"20".equals(PLAN_TYPE)){					val=NumberUtils.parseDouble(SRC_DURATION);				}				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){					val=NumberUtils.parseDouble(SRC_DURATION);				}			}				StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GPRS_CUR_22(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507080";		String desc = "WLAN总费用(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if(SRC_START_TIME.compareTo("20120401000000") < 0){				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE)) + NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GPRS_CUR_23(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "49000010";		String desc = "WLAN总费用(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) && 						!"20".equals(PLAN_TYPE)){						val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+								NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;					}			}else if(rowData.get(Constants.SRC_START_TIME).compareTo("20120401000000")>0){				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))){					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GPRS_HIS_23(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){				String code = "49000010";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}			public void GPRS_CUR_24(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507110";		String desc = "WLAN总流量(单位:**MB**KB)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));					if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"20".equals(PLAN_TYPE)){					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_OPP_TYPE));				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_25(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))					&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_FREERES_CODE);			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))					&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}			}			public void GPRS_HIS_25(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){				String code = "";		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))				&& !"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			//code=rowData.get(Constants.SRC_FREERES_CODE);			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GPRS_CUR_26(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 					!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			}			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}		public void GPRS_HIS_26(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		/*String code = "";		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 				!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);*/	}			public void GPRS_CUR_27(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 					!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			}						if(NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2))>0){				String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);				if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;					}else{						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);					}				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}			public void GPRS_HIS_27(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		/* code = "";		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 				!"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);*/	}		public void GPRS_CUR_41(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "-2";		String desc = "校园WLAN总时长(单位:**小时**分**秒)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_EXT_INFO=rowData.get(Constants.SRC_OPP_EXT_INFO);						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"!".equals(SRC_OPP_AREA_CODE)) && 						"1000".equals(SRC_OPP_EXT_INFO) && !"20".equals(PLAN_TYPE)){					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}else{				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))						&& "1000".equals(SRC_OPP_EXT_INFO)){					val=NumberUtils.parseDouble(rowData.get(Constants.SRC_DURATION));				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_42(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45401871";		String desc = "校园WLAN总费用(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			String SRC_OPP_EXT_INFO=rowData.get(Constants.SRC_OPP_EXT_INFO);			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));						if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) &&						"1000".equals(SRC_OPP_EXT_INFO) && !"20".equals(PLAN_TYPE)){					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;				}			}else{				if("16".equals(SRC_CALL_TYPE) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE)) &&						"1000".equals(SRC_OPP_EXT_INFO)){					val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+							NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_43(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507120";		String desc = "校园WLAN总流量(单位:**MB**KB)";		int val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && 						!"20".equals(PLAN_TYPE)){					val=NumberUtils.parseInt(rowData.get(Constants.SRC_OPP_TYPE));				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_44(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))					&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_FREERES_CODE);			}			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))>0){				String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);				if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;					}else{						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}				}else{					val=NumberUtils.parseDouble(SRC_FREERES_VAL);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))					&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}	}			public void GPRS_HIS_44(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = null;		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && (SRC_OPP_AREA_CODE==null || !"1".equals(SRC_OPP_AREA_CODE))				&& "1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			//code=rowData.get(Constants.SRC_FREERES_CODE);			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}			public void GPRS_CUR_45(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 					"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			}			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}else{				val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}			public void GPRS_HIS_45(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		/*String code = null;		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && SRC_OPP_AREA_CODE==null && 				"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);*/	}			public void GPRS_CUR_46(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			String SRC_OPP_AREA_CODE=rowData.get(Constants.SRC_OPP_AREA_CODE);			if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 					"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			}			String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))						||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))						||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}else{				val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}		public void GPRS_HIS_46(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = null;		String PLAN_TYPE = CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		String SRC_OPP_AREA_CODE = rowData.get(Constants.SRC_OPP_AREA_CODE);		if("16".equals(rowData.get(Constants.SRC_CALL_TYPE)) && !"1".equals(SRC_OPP_AREA_CODE) && 				"1000".equals(rowData.get(Constants.SRC_OPP_EXT_INFO)) && !"20".equals(PLAN_TYPE)){			code = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);	}			public void GPRS_CUR_61(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507090";		String desc = "无线宽带总时长(单位:**小时**分**秒)";		int val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("20".equals(PLAN_TYPE)){					val=NumberUtils.parseInt(rowData.get(Constants.SRC_DURATION));				}			}else{				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "5".equals(rowData.get(Constants.SRC_PLAN_ID))){					val=NumberUtils.parseInt(rowData.get(Constants.SRC_DURATION));				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_62(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "";		String desc = "无线宽带总费用(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){				code = "49000040";			}else{				code = "42001360";			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){				if("20".equals(PLAN_TYPE)){					val=(double) 0;				}			}else{				if("11".equals(rowData.get(Constants.SRC_CALL_TYPE)) && "5".equals(rowData.get(Constants.SRC_PLAN_ID))){					val=(double) 0;				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GPRS_CUR_63(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "4507130";		String desc = "无线宽带总流量(单位:**MB**KB)";		int val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			if(rowData.get(Constants.SRC_START_TIME).compareTo("201204") >= 0){				String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));				if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1))){					if("20".equals(PLAN_TYPE)){						val=NumberUtils.parseInt(rowData.get(Constants.SRC_OPP_TYPE));					}				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			public void GPRS_CUR_64(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_FREERES_CODE);			}			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))>0){				String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);				if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;					}else{						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}				}else{					val=NumberUtils.parseDouble(SRC_FREERES_VAL);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}	}		public void GPRS_HIS_64(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = null;		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("5".equals(rowData.get(Constants.SRC_PLAN_ID)) || "20".equals(PLAN_TYPE)){			//code=rowData.get(Constants.SRC_FREERES_CODE);			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GPRS_CUR_65(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String code = "";		String desc = "";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_EXTEND_ATTR_LONGCODE1=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**小时**分**秒)";				}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:次)";				}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:**MB**KB)";				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))){					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:元)";				}else{					desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1)+"(单位:条)";				}			}			String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));			if("5".equals(PLAN_TYPE) || "20".equals(PLAN_TYPE)){				code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);			}			if(NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2))>0){				String SRC_EXTEND_ATTR_LONGCODE2=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);				if(CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1)){					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1))							||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))							||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_EXTEND_ATTR_LONGCODE1))){						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2)/100;					}else{						val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);					}				}else{					val=NumberUtils.parseDouble(SRC_EXTEND_ATTR_LONGCODE2);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}		public void GPRS_HIS_65(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		/*String code = null;		String PLAN_TYPE=CacheProvider.getProd("PLAN_TYPE", rowData.get(Constants.SRC_INFO_MAJOR));		if("5".equals(PLAN_TYPE) || "20".equals(PLAN_TYPE)){			code=rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		}		stat.addHisItem(code, resourceType, bigType, sortIndex);*/	}    /*************************************${template.SP}*************************************************/	public void SP_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "8000000";		String desc = "SP代收费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			val=NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void SP_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = rowData.get(Constants.SRC_SERVICE_TYPE);		String timeday=rowData.get(Constants.SRC_START_TIME).substring(0,8);		String SRC_SERVICE_TYPE=rowData.get(Constants.SRC_SERVICE_TYPE);		String SP_NAME=CacheProvider.getSp("SP_NAME", SRC_SERVICE_TYPE, timeday);		if(SP_NAME==null){			SP_NAME=CacheProvider.getSp("SP_NAME", SRC_SERVICE_TYPE);		}		if(SP_NAME==null){			SP_NAME=SRC_SERVICE_TYPE;		}		String desc="含: " + SP_NAME + "(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			val=NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}    /*************************************${template.GSM}*************************************************/public void GSM_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){		String code =  "45000200";		String desc = "本地基本通话费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){				String roamType = rowData.get(Constants.SRC_ROAM_TYPE);			String SERVICE_TYPE =  rowData.get(Constants.SRC_SERVICE_TYPE);			int serviceType = NumberUtils.parseInt(SERVICE_TYPE);			if( ("1".equals(roamType) ||  "5".equals(roamType) ||  "6".equals(roamType)) 					&& serviceType != 19 && serviceType != 7 && serviceType != 4 && serviceType != 8){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))/100;				}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GSM_HIS_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000200";				stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void  GSM_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  "45000190";		String desc = "本地国内（不含港澳台）长途费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){					String roamType = rowData.get(Constants.SRC_ROAM_TYPE);			String SERVICE_TYPE =  rowData.get(Constants.SRC_SERVICE_TYPE);			int serviceType = NumberUtils.parseInt(SERVICE_TYPE);			if ("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1)) || "2".equals(rowData.get(Constants.SRC_USER_TYPE))) {				if( ("1".equals(roamType) ||  "5".equals(roamType) ||  "6".equals(roamType)) 						&& serviceType !=9  && serviceType!=4 && "1".equals(rowData.get(Constants.SRC_HPLMN3))){					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE ))/100;					}			}else{				if( ("1".equals(roamType) ||  "5".equals(roamType) ||  "6".equals(roamType)) && serviceType !=9  && serviceType!=4){					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE ))/100;				}			}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GSM_HIS_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000190";				stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void  GSM_CUR_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  "45000560";		String desc = "国内（不含港澳台）漫游通话费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			String roamType = rowData.get(Constants.SRC_ROAM_TYPE);			String SERVICE_TYPE =  rowData.get(Constants.SRC_SERVICE_TYPE);			String hplmn3 = rowData.get(Constants.SRC_HPLMN3);			int serviceType = NumberUtils.parseInt(SERVICE_TYPE);			if ("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1)) || "2".equals(rowData.get(Constants.SRC_USER_TYPE))) {				if(("2".equals(roamType) || "3".equals(roamType)) && serviceType!=4						&& (serviceType!=9 || (serviceType!=19 && serviceType!=21))						&& (!"2".equals(hplmn3) && !"3".equals(hplmn3))){					val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE ))+							NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE)))/100;				}			}else{				if(("2".equals(roamType) || "3".equals(roamType)) && serviceType!=4						&& (serviceType!=9 || (serviceType!=19 && serviceType!=21))){					val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE ))+							NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE)))/100;					}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GSM_HIS_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000560";				stat.addHisItem(code, resourceType, bigType, sortIndex);	}	public void  GSM_CUR_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  "45000530";		String desc = "国际长途费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			if ("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1)) || "2".equals(rowData.get(Constants.SRC_USER_TYPE))) {				if("4".equals(rowData.get(Constants.SRC_ROAM_TYPE)) || "2".equals(rowData.get(Constants.SRC_HPLMN3))) {					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))/100;					}			}else{				if("4".equals(rowData.get(Constants.SRC_ROAM_TYPE))){					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))/100;					}			}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void GSM_HIS_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000530";				stat.addHisItem(code, resourceType, bigType, sortIndex);	}	public void GSM_CUR_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45000540";		String desc = "国际漫游费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			if("4".equals(rowData.get(Constants.SRC_ROAM_TYPE))){							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))/100;					}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_HIS_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000540";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GSM_CUR_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45001480";		String desc = "虚拟网通话费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			if("7".equals(rowData.get(Constants.SRC_SERVICE_TYPE))){							val = NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))/100;					}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_HIS_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45001480";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GSM_CUR_7(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45000500";		String desc = "分时分区通话费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			String roamType = rowData.get(Constants.SRC_ROAM_TYPE);			if("4".equals(rowData.get(Constants.SRC_SERVICE_TYPE))  && !"2".equals(roamType) && !"3".equals(roamType)){							val = (NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+						NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))+						NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;					}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_HIS_7(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45000500";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}			public void GSM_CUR_8(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45001270";		String desc = "港澳台长途费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			if("1".equals(rowData.get(Constants.SRC_EXTEND_ATTR_SHORTCODE1)) || "2".equals(rowData.get(Constants.SRC_USER_TYPE))){							if( "7".equals(rowData.get(Constants.SRC_ROAM_TYPE)) || "3".equals(rowData.get(Constants.SRC_HPLMN3))){					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))/100;					}						}else{				if("7".equals(rowData.get(Constants.SRC_ROAM_TYPE))){					val = NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))/100;					}				}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_HIS_8(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45001270";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}			public void GSM_CUR_9(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "45001280";		String desc = "港澳台漫游通话费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){						if( "7".equals(rowData.get(Constants.SRC_ROAM_TYPE))){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))/100;				}									StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_HIS_9(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "45001280";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GSM_CUR_10(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "2130014";		String desc = "信息费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_INFO_CHARGE = rowData.get(Constants.SRC_INFO_CHARGE);			if(SRC_INFO_CHARGE == null){				SRC_INFO_CHARGE = "";			}			if( "0".compareTo(SRC_INFO_CHARGE)<0){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;				}									StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void GSM_CUR_90(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String SRC_EXTEND_ATTR_LONGCODE3 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE3);		String code = SRC_EXTEND_ATTR_LONGCODE3;			String desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE3);		double val = 0;		String FREERES_TYPE = CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE3);		if( CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE3) ){			if("1".equals(FREERES_TYPE)){				desc += "(单位:**小时**分**秒)";			}else if ("2".equals(FREERES_TYPE) ){				desc += "(单位:次)";			}else if("3".equals(FREERES_TYPE) ){				desc += "(单位:**MB**KB)";			}else if( "4".equals(FREERES_TYPE) ){				desc += "(单位:元)"; 			}else{				desc += "(单位:条)" ; 			}		}		if(!isHistory || (isHistory && hisQueryType == 1)){				String SRC_EXTEND_ATTR_LONGCODE4 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4);			SRC_EXTEND_ATTR_LONGCODE4 = SRC_EXTEND_ATTR_LONGCODE4 == null ? "" : SRC_EXTEND_ATTR_LONGCODE4;			if( "0".compareTo(SRC_EXTEND_ATTR_LONGCODE4)<0){				if( CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE3) ){					if("1".equals(FREERES_TYPE)){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4));						}else if ("2".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4));						}else if("3".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4));						}else if( "4".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4))/100;						}else{						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4));						}				}			}else{				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE4));				}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);	}		public void GSM_HIS_90(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		//String code = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE3);		//stat.addHisItem(code, resourceType, bigType, sortIndex);		sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);	}		public void GSM_CUR_91(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String SRC_EXTEND_ATTR_LONGCODE1 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		String code = SRC_EXTEND_ATTR_LONGCODE1;		String desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_EXTEND_ATTR_LONGCODE1);		double val = 0;				String FREERES_TYPE = CacheProvider.tabFreeCode("FREERES_TYPE",SRC_EXTEND_ATTR_LONGCODE1);		if( CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1) ){			if("1".equals(FREERES_TYPE)){				desc += "(单位:**小时**分**秒)";			}else if ("2".equals(FREERES_TYPE) ){				desc += "(单位:次)";			}else if("3".equals(FREERES_TYPE) ){				desc += "(单位:**MB**KB)";			}else if( "4".equals(FREERES_TYPE) ){				desc += "(单位:元)"; 			}else{				desc += "(单位:条)" ; 			}		}		if(!isHistory || (isHistory && hisQueryType == 1)){		        String SRC_EXTEND_ATTR_LONGCODE2 = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2);			if(SRC_EXTEND_ATTR_LONGCODE2 == null){				SRC_EXTEND_ATTR_LONGCODE2 = "";			}			if( "0".compareTo(SRC_EXTEND_ATTR_LONGCODE2)<0){				if( CacheProvider.tabFreeCode(SRC_EXTEND_ATTR_LONGCODE1) ){					if("1".equals(FREERES_TYPE)){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2));						}else if ("2".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2));						}else if("3".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2));						}else if( "4".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2))/100;						}else{						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2));						}				}			}else{				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE2));				}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	}		public void GSM_HIS_91(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		//String code = rowData.get(Constants.SRC_EXTEND_ATTR_LONGCODE1);		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void GSM_CUR_92(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String  SRC_FREERES_CODE = rowData.get(Constants.SRC_FREERES_CODE);		String code =  SRC_FREERES_CODE;		String desc = CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE);		double val = 0;		String FREERES_TYPE = CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE);		if( CacheProvider.tabFreeCode(SRC_FREERES_CODE) ){			if("1".equals(FREERES_TYPE)){				desc += "(单位:**小时**分**秒)";			}else if ("2".equals(FREERES_TYPE) ){				desc += "(单位:次)";			}else if("3".equals(FREERES_TYPE) ){				desc += "(单位:**MB**KB)";			}else if( "4".equals(FREERES_TYPE) ){				desc += "(单位:元)"; 			}else{				desc += "(单位:条)" ; 			}		}		if(!isHistory || (isHistory && hisQueryType == 1)){		        String SRC_FREERES_VAL = rowData.get(Constants.SRC_FREERES_VAL);			if(SRC_FREERES_VAL == null){				SRC_FREERES_VAL = "";			}			if( "0".compareTo(SRC_FREERES_VAL)<0){				if( CacheProvider.tabFreeCode(SRC_FREERES_CODE) ){					if("1".equals(FREERES_TYPE)){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));						}else if ("2".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));						}else if("3".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));						}else if( "4".equals(FREERES_TYPE) ){						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL))/100;						}else{						val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));						}				}			}else{				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_FREERES_VAL));				}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/	} 		public void GSM_HIS_92(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		//String code = rowData.get(Constants.SRC_FREERES_CODE);		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}	/*************************************${template.OWNSP}*************************************************/	public void OWNSP_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  "9000000";		String desc = "增值业务信息费/交易费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){					if( "7".equals(rowData.get(Constants.SRC_CALL_TYPE)) || "8".equals(rowData.get(Constants.SRC_CALL_TYPE)) ){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;				}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void OWNSP_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  rowData.get(Constants.SRC_SERVICE_TYPE);		String desc = "";		String timeStr = rowData.get(Constants.SRC_START_TIME);		String timeDay= timeStr.length()<8?timeStr:timeStr.substring(0, 8);				String prodname=CacheProvider.getOwnSp("PROD_NAME", code, timeDay);		if( prodname == null ){			prodname=CacheProvider.getOwnSp("PROD_NAME", code);		}		if (prodname == null ){			prodname=rowData.get(Constants.SRC_SERVICE_TYPE);		}		desc = "含:   " + prodname + "(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){					if( "7".equals(rowData.get(Constants.SRC_CALL_TYPE)) || "8".equals(rowData.get(Constants.SRC_CALL_TYPE)) ){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;			}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void OWNSP_CUR_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  "9000001";		String desc = "增值业务月费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){					if( "40".equals(rowData.get(Constants.SRC_CALL_TYPE)) ){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;				}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void OWNSP_CUR_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code =  rowData.get(Constants.SRC_SERVICE_TYPE);		String desc = "";		String prodname = CacheProvider.getUpSubject("ACC_NAME", code);		if( prodname == null ){			prodname= rowData.get(Constants.SRC_SERVICE_TYPE);		}		desc = "含:   " + prodname + "(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){					if( "40".equals(rowData.get(Constants.SRC_CALL_TYPE)) ){				val = NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE))/100;				}						StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}			/*************************************${template.SMS}*************************************************/public void SMS_CUR_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "";		String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);		if(SRC_START_TIME.compareTo("20120401000000")>0){			code="48000080";		}else{			code="42000450";		}		String desc = "短信通信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){//			return (SRC_CALL_TYPE ==4 or SRC_CALL_TYPE==5)			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			if("4".equals(SRC_CALL_TYPE) || "5".equals(SRC_CALL_TYPE)){//				return  (SRC_BASIC_CHARGE + SRC_TOLL_CHARGE + SRC_INFO_CHARGE)/100				val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))						+NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}	public void SMS_CUR_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){//		if SRC_START_TIME >= "20120401000000" then//				  return '48000070'//			else//				  return '42000330'//			end		String code = "";		String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);		if(SRC_START_TIME.compareTo("20120401000000")>0){			code="48000070";		}else{			code="42000330";		}		String desc="彩信通信费(单位:元)";		double val = 0;		if(!isHistory || (isHistory && hisQueryType == 1)){//			return (SRC_CALL_TYPE ==12 or SRC_CALL_TYPE==13)			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			if("12".equals(SRC_CALL_TYPE) || "13".equals(SRC_CALL_TYPE)){//				return  (SRC_BASIC_CHARGE + SRC_TOLL_CHARGE + SRC_INFO_CHARGE)/100				val=(NumberUtils.parseDouble(rowData.get(Constants.SRC_BASIC_CHARGE))+NumberUtils.parseDouble(rowData.get(Constants.SRC_TOLL_CHARGE))						+NumberUtils.parseDouble(rowData.get(Constants.SRC_INFO_CHARGE)))/100;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000000";		String desc = "139手机邮箱短彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000010";		String desc = "会易通短彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000020";		String desc = "手机钱包短彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000030";		String desc = "e讯短彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_7(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000040";		String desc = "移动新视界短彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_8(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000050";		String desc = "企业通信助理短信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_9(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000060";		String desc = "企业通信助理彩信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_10(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000090";		String desc = "企业自建短信平台端口费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_11(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000100";		String desc = "集团短信通信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_12(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000110";		String desc = "集团彩信通信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_13(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48000120";		String desc = "400挂机短信通信费(单位:元)";		double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_14(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48080";		String desc = "短信接收(单位:条)";		Integer val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){//			return SRC_CALL_TYPE == 5			String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);			if("5".equals(SRC_CALL_TYPE)){				val=1;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_15(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48081";		String desc = "短信发送(单位:条)";		Integer val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			if("4".equals(rowData.get(Constants.SRC_CALL_TYPE))){				val=1;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_16(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48082";		String desc = "彩信接收(单位:条)";		Integer val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			if("13".equals(rowData.get(Constants.SRC_CALL_TYPE))){				val=1;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_17(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				String code = "48083";		String desc = "彩信发送(单位:条)";		Integer val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			if("12".equals(rowData.get(Constants.SRC_CALL_TYPE))){				val=1;			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}	}		public void SMS_CUR_90(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){		/*//		if SRC_CALL_TYPE == 4 or SRC_CALL_TYPE == 5 then//		 return  SRC_FREERES_CODE//		end		String code = "";		String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);		String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);		if("4".equals(SRC_CALL_TYPE) || "5".equals(SRC_CALL_TYPE)){			code=SRC_FREERES_CODE;		}//		if tabFreeCode[SRC_FREERES_CODE]~=nil then//				  if tabFreeCode[SRC_FREERES_CODE]["FREERES_TYPE"] == 1 then//				    return  tabFreeCode[SRC_FREERES_CODE]['FREERES_NAME'] +'(单位:**小时**分**秒)'//				  elseif tabFreeCode[SRC_FREERES_CODE]["FREERES_TYPE"] == 2 then//				    return  tabFreeCode[SRC_FREERES_CODE]['FREERES_NAME']..'(单位:次)'//				  elseif tabFreeCode[SRC_FREERES_CODE]["FREERES_TYPE"] == 3 then//				    return  tabFreeCode[SRC_FREERES_CODE]['FREERES_NAME']..'(单位:**MB**KB)'//				  elseif tabFreeCode[SRC_FREERES_CODE]["FREERES_TYPE"] == 4 then//				    return  tabFreeCode[SRC_FREERES_CODE]['FREERES_NAME']..'(单位:元)'//				  else//				    return  tabFreeCode[SRC_FREERES_CODE]['FREERES_NAME']..'(单位:条)'//				  end//				end		String desc = "";		if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:**小时**分**秒)";			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:次)";			}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:**MB**KB)";			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:元)";			}else{				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:条)";			}		}				double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);				if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){					if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE)) || 							"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE)) ||							"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){						val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;					}else{						val=NumberUtils.parseDouble(SRC_FREERES_VAL);					}				}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);		if("4".equals(SRC_CALL_TYPE) || "5".equals(SRC_CALL_TYPE)){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}	}		public void SMS_CUR_91(Map<String, String> rowData, DRProcessRequest request, String bigType, String sumType, int sortIndex, StatMetaDescriptor stat, 			boolean isHistory, int hisQueryType){				/*String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);		String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);		String code = "";		if("12".equals(SRC_CALL_TYPE) || "13".equals(SRC_CALL_TYPE)){			code=SRC_FREERES_CODE;		}		String desc = "";		if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:**小时**分**秒)";			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:次)";			}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:**MB**KB)";			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:元)";			}else{				desc=CacheProvider.tabFreeCode("FREERES_NAME", SRC_FREERES_CODE)+"(单位:条)";			}		}				double val = 0;				if(!isHistory || (isHistory && hisQueryType == 1)){			String SRC_FREERES_VAL=rowData.get(Constants.SRC_FREERES_VAL);			if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){				if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE)) || 						"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE)) ||						"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){					val=NumberUtils.parseDouble(SRC_FREERES_VAL);				}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", SRC_FREERES_CODE))){					val=NumberUtils.parseDouble(SRC_FREERES_VAL)/100;				}else{					val=NumberUtils.parseDouble(SRC_FREERES_VAL);				}			}			StatMetaDescriptor meta = new StatMetaDescriptor(code, desc, val, sumType, bigType, sortIndex);			stat.addCurItem(meta);		}*/		String SRC_CALL_TYPE = rowData.get(Constants.SRC_CALL_TYPE);		if("12".equals(SRC_CALL_TYPE) || "13".equals(SRC_CALL_TYPE)){			sumCURResources(rowData, request, bigType, sumType, sortIndex, stat);		}	}	//===================================================================================		public void SMS_HIS_1(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "";		String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);		if(SRC_START_TIME.compareTo("20120401000000")>0){			code="48000080";		}else{			code="42000450";		}		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_2(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "";		String SRC_START_TIME=rowData.get(Constants.SRC_START_TIME);		if(SRC_START_TIME.compareTo("20120401000000")>0){			code="48000070";		}else{			code="42000330";		}		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_3(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000000";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_4(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000010";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_5(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000020";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_6(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000030";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_7(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000040";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_8(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000050";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_9(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000060";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_10(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000090";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_11(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000100";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_12(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000110";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_13(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "48000120";		stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_90(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String code = "";		String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);		String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);		if("4".equals(SRC_CALL_TYPE) || "5".equals(SRC_CALL_TYPE)){			//code=SRC_FREERES_CODE;			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}		public void SMS_HIS_91(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String SRC_CALL_TYPE=rowData.get(Constants.SRC_CALL_TYPE);		String SRC_FREERES_CODE=rowData.get(Constants.SRC_FREERES_CODE);		String code = "";		if("12".equals(SRC_CALL_TYPE) || "13".equals(SRC_CALL_TYPE)){			//code=SRC_FREERES_CODE;			sumHisResources(rowData,request, bigType, resourceType, sortIndex, stat);		}		//stat.addHisItem(code, resourceType, bigType, sortIndex);	}    	@SuppressWarnings({ "rawtypes", "unchecked" })	public List getResultFromHisConfig(StatMetaDescriptor stat, DRProcessRequest request){			 String CHARGE_TEMPLATE = " select nvl(fee, 0),item2_name, item3_name, item2_id code from acc_emend_dtl_"+ request.getRegionCode() +"_"+ request.getBillMonth() +" a "		 		                + " where user_id = '"+ request.getUserId() +"' and item2_id in ${code} "		 		                + " and a.item1_id in (101,410,420,430,450,480,490)";		 		 String FREE_RESOURCE_TEMPLATE = " select nvl(fee, 0), item2_name, item3_name, item2_id code from acc_emend_other_"+ request.getRegionCode() +"_"+ request.getBillMonth() +" a "		 		                       + " where user_id = '"+ request.getUserId() +"' and item2_id in ${code} "		 		                       + " and a.item1_id='501'";		 Statement stmt = null;		 ResultSet rs1 = null;		 ResultSet rs2 = null;		 List items = new ArrayList();		 DRConnection drConnection = new DRConnection();		 try{			 Connection conn = drConnection.getConnectionFromFactory("CSQRYConnectionFactory");			 stmt = conn.createStatement();			 			 String ids_charge = "";			 String ids_free_resource = "";			 for(Iterator it = stat.getHisCodeProperties().keySet().iterator(); it.hasNext();){				 String code = (String) it.next();				 Map properties = (Map) stat.getHisCodeProperties().get(code);				 properties.put("type", 0);				 properties.put("value", 0d);				 String resourceType = (String)properties.get("resourceType");				 if("1".equals(resourceType)){					 ids_charge += code + ",";				 }else if("3".equals(resourceType)){					 ids_free_resource += code + ",";				 }			 }			 //System.out.println("ids_charge = " + ids_charge);			 //System.out.println("ids_free_resource = " + ids_free_resource);			 if(ids_charge.length() > 0){				 ids_charge = ids_charge.substring(0, ids_charge.length() - 1);				 String ids = "('" + ids_charge.replace(",", "','") + "')";				 String sql1 = CHARGE_TEMPLATE.replace("${code}", ids);				 log.info("sql1---> " + sql1);				 rs1 = stmt.executeQuery(sql1);				 while(rs1.next()){					String code = rs1.getString(4);					Map properties = (Map) stat.getHisCodeProperties().get(code);					Double val = rs1.getBigDecimal(1).doubleValue();					properties.put("value", val / 100);					properties.put("desc", rs1.getString(2) 					     + unitTrans((rs1.getString(3)== null || rs1.getString(3).equals("") ? "分" : rs1.getString(3))));				 }			 }			 if(ids_free_resource.length() > 0){				 ids_free_resource = ids_free_resource.substring(0, ids_free_resource.length() - 1);				 String ids = "('" + ids_free_resource.replace(",", "','") + "')";				 String sql2 = FREE_RESOURCE_TEMPLATE.replace("${code}", ids);				 log.info("sql2---> " + sql2);				 rs2 = stmt.executeQuery(sql2);				 while(rs2.next()){					String code = rs2.getString(4);					Map properties = (Map) stat.getHisCodeProperties().get(code);					Double val = rs2.getBigDecimal(1).doubleValue();					properties.put("value", val);					properties.put("desc", rs2.getString(2) +unitTrans(rs2.getString(3)));				 }			 }			 for(Iterator it = stat.getHisCodeProperties().keySet().iterator(); it.hasNext();){			 	 String code = (String) it.next();				 Map properties = (Map) stat.getHisCodeProperties().get(code);				 if(properties.containsKey("desc")){				 	items.add(properties);				 }			 }			 					 }catch(Exception e){			 //log.error("历史汇总取对账单报错", e);			 throw new AppRuntimeException("历史汇总取对账单报错", e);		 }finally{			 if(rs1 != null){				try{					rs1.close();				}catch(Exception e){					log.error(e);				}			 }			 if(rs2 != null){				try{					rs2.close();				}catch(Exception e){					log.error(e);				}			 }			 if(stmt != null){				try{					stmt.close();				}catch(Exception e){					log.error(e);				}			 }			 drConnection.releaseConnection();		 }		 		 return items;	}	public String unitTrans(String unit){		if("KB".equals(unit)){			return "(单位:**MB**KB)";		}		else if("分".equals(unit)){			return "(单位:元)";		}		else if("rmb".equals(unit)){			return "(单位:元)";			}		else if("秒".equals(unit)){			return "(单位:**小时**分**秒)";		}		else if("分钟".equals(unit)){			return "(单位:**小时**分**秒)";		}		else if(unit == null || "".equals(unit)){ 			return ""; 		}		else {			return "(单位:"+unit+")";		}	}	public String getFreeResName(String SRC_FREERES_CODE){		String desc = "";		if(CacheProvider.tabFreeCode(SRC_FREERES_CODE)){			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**小时**分**秒)";			}else if("2".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:次)";			}else if("3".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:**MB**KB)";			}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE",SRC_FREERES_CODE))){				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:元)";			}else{				desc=CacheProvider.tabFreeCode("FREERES_NAME",SRC_FREERES_CODE)+"(单位:条)";			}		}		return desc;	}	public double getFreeResValue(String resCode, String resValue){		double val = 0;		if(CacheProvider.tabFreeCode(resCode)){			if("1".equals(CacheProvider.tabFreeCode("FREERES_TYPE",resCode))					||"2".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))					||"3".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))){				val = NumberUtils.parseDouble(resValue);			}else if("4".equals(CacheProvider.tabFreeCode("FREERES_TYPE", resCode))){				val = NumberUtils.parseDouble(resValue)/100;			}else{				val = NumberUtils.parseDouble(resValue);			}		}		return val;	}	public void sumCURResources(Map<String, String> rowData, 							 DRProcessRequest request, 							 String bigType, 							 String sumType, 							 int sortIndex, 							 StatMetaDescriptor stat){		String[] codes = null;		if(rowData.get(Constants.FREERES_CODE_LIST) != null && !rowData.get(Constants.FREERES_CODE_LIST).equals("")){			codes = rowData.get(Constants.FREERES_CODE_LIST).split("\\|");		}		if(codes != null){			for(String code : codes){				StatMetaDescriptor meta = new StatMetaDescriptor(code, getFreeResName(code), 						getFreeResValue(code, rowData.get(Constants.SRC_FREERES_CODE + "_" + code)), sumType, bigType, sortIndex);				stat.addCurItem(meta);			}		}			}	public void sumHisResources(Map<String, String> rowData, DRProcessRequest request, String bigType, String resourceType, int sortIndex, StatMetaDescriptor stat){		String[] codes = null;		if(rowData.get(Constants.FREERES_CODE_LIST) != null && !rowData.get(Constants.FREERES_CODE_LIST).equals("")){			codes = rowData.get(Constants.FREERES_CODE_LIST).split("\\|");		}		if(codes != null){			for(String code : codes){				stat.addHisItem(code, resourceType, bigType, sortIndex);			}		}	}}